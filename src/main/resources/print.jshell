/*
 * The MIT License (MIT)
 *
 * Copyright (c) 2022 ${author}
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

import io.github.spencerpark.ijava.IJava;
import io.github.spencerpark.ijava.JavaKernel;
import io.github.spencerpark.ijava.execution.CodeEvaluator;
import io.github.spencerpark.jupyter.kernel.magic.registry.LineMagic;
import jdk.jshell.JShell;
import jdk.jshell.Snippet;

import java.lang.reflect.Field;
import java.util.List;
import java.util.Optional;
import java.util.regex.Matcher;
import java.util.regex.Pattern;


// System.out.println("\n----- printer init -----\n");

public class Printer {
    private static final Pattern VAR_IDX_PATTERN = Pattern.compile("(?i)\\$JShell\\$(\\d+)");
    private static final String METHOD_NAME = "print";

    private static final List<String> COMMENT_PATTERNS = List.of("/\\*(.|\\s)*?\\*/", "//.*\\n*", "\\s+");

    private static int varIdx = 0;
    //private static String prefix = "printer| ";
    private static String prefix = "";
    // java ansi code demo: https://stackoverflow.com/a/5762502
    private static final String varNameStylePattern = "\u001B[36m%s\u001B[0m";

    private static JShell jshell;

    static {
        try {
            JavaKernel kernel = IJava.getKernelInstance();
            Field field = kernel.getClass().getDeclaredField("evaluator");
            field.setAccessible(true);
            CodeEvaluator evaluator = (CodeEvaluator) field.get(kernel);
            jshell = evaluator.getShell();
        } catch (Exception e) {
            System.out.println(">>> Printer Get JShell instance error: " + e.getMessage());
        }
    }

    public static void print(Object obj) {
        String varName = null;

        if (jshell != null) {
            StackTraceElement[] strace = new Exception().getStackTrace();
            // call from an outer *print* wrapper function, so the strace index is 1 + 1;
            // if call Printer.print directly, the strace index is 1.
            Matcher idMatcher = VAR_IDX_PATTERN.matcher(strace[1 + 1].getClassName());
            String id = idMatcher.find() ? idMatcher.group(1) : null;
            if (id != null) {
                Optional<Snippet> snippetOptional = jshell.snippets()
                        .skip(Long.parseLong(id) - 1)
                        .filter(o -> o.id().equals(id)).findFirst();
                if (snippetOptional.isPresent()) {
                    Snippet snippet = snippetOptional.get();
                    String source = snippet.source();
                    if (source.contains(METHOD_NAME)) {
                        for (String pattern : COMMENT_PATTERNS) {
                            source = source.replaceAll(pattern, "");
                        }
                        varName = source.substring(source.indexOf("(") + 1, source.lastIndexOf(")"));
                    }
                }
            }
        }
        if (varName == null) {
            varName = "var-" + varIdx;
            varIdx++;
        }
        System.out.printf("%s%s: %s%n", prefix, String.format(varNameStylePattern, varName), obj);
    }

    public static JShell getJshell() {
        return jshell;
    }

    @LineMagic
    public void printerPrefix(List<String> args) {
        if (args == null || args.isEmpty()) {
            System.out.printf("Printer current prefix=\"%s\", -h for help.", prefix);
            return;
        }
        if (args.get(0).equals("-h") || args.get(0).equals("--help")) {
            System.out.println("example %printerPrefix \"new prefix: \"");
            return;
        }
        System.out.printf("Change printer prefix from \"%s\" to \"%s\"%n", prefix, args.get(0));
        prefix = args.get(0);
    }
}


public void print(Object arg) {
    Printer.print(arg);
}

IJava.getKernelInstance().getMagics().registerMagics(new Printer());
